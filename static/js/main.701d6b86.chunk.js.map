{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","width","DGridScrollbar","WebkitBoxShadow","borderRadius","backgroundColor","main","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","el","HeaderCellRenderer","property","columnIndex","data","style","classes","display","alignItems","headerHeight","pl","variant","active","direction","onClick","className","CellRenderer","rowIndex","rowSpacing","columns","rows","rowHeight","gridStyle","headerCellStyle","cellStyle","useTheme","useState","sort","setSort","sortBy","setSortBy","handleRequestSort","_","columnsWidth","strLen","colWidths","aColumn","id","current","total","prev","getColumnsWidth","columnCount","columnWidth","index","rowCount","itemData","borderBottom","headerStyle","color","itemKey","App","setRows","handleOnClick","alert","useEffect","_Name","_Visibility","actions","isNumeric","label","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.701d6b86.chunk.js","sourcesContent":["import styles from './styles.module.css'\n\nimport React, { useState } from 'react'\nimport { Box, makeStyles, TableSortLabel, Typography, useTheme } from '@material-ui/core'\n\n// Libs\nimport { VariableSizeGrid as DGrid } from 'react-window'\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport { Fragment } from 'react';\n\nconst scrollbarWidth = 10\n\nconst useStyles = makeStyles(theme => ({\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n  DGridScrollbar: {\n    '&::-webkit-scrollbar-track': {\n      WebkitBoxShadow: 'inset 0 0 6px rgba(1,1,1,0.1)',\n      borderRadius: scrollbarWidth,\n      backgroundColor: \"#F5F5F5\"\n    },\n    '&::-webkit-scrollbar': {\n      width: scrollbarWidth,\n      backgroundColor: \"#F5F5F5\"\n    },\n    '&::-webkit-scrollbar-thumb': {\n      width: scrollbarWidth,\n      borderRadius: scrollbarWidth,\n      backgroundColor: theme.palette.primary.main\n    }\n  }\n}))\n\n// function HTMLToString(htmlString) {\n//     return htmlString.replace(/<[^>]+>/g, '')\n// }\n\n\n// Descending Comparator\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1\n  }\n  return 0\n}\n\n// Get Comparator\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy)\n}\n\n// Sort Columns\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index])\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0])\n    if (order !== 0) return order\n    return a[1] - b[1]\n  })\n  return stabilizedThis.map((el) => el[0])\n}\n\n\nfunction HeaderCellRenderer({ columnIndex, data, style }) {\n\n  const classes = useStyles()\n\n  const sortHandler = (property) => (event) => {\n    data.handleRequestSort(event, property)\n  }\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\" style={{ ...style, ...data.headerStyle, height: data.headerHeight }}>\n      <Box pl={2}>\n        <Typography variant=\"body2\" >\n          <TableSortLabel\n            active={data.sortBy === data.columns[columnIndex].id}\n            direction={data.sortBy === data.columns[columnIndex].id ? data.sort : 'asc'}\n            onClick={(sortHandler(data.columns[columnIndex].id))}\n          >\n            {data.columns[columnIndex].label}\n            {data.orderBy === data.columns[columnIndex].id ? (\n              <span className={classes.visuallyHidden}>\n                {data.sort === 'desc' ? 'sorted descending' : 'sorted ascending'}\n              </span>)\n              : null\n            }\n          </TableSortLabel>\n        </Typography>\n      </Box>\n    </Box>\n  )\n}\n\n// CellRenderer renders a cell\nfunction CellRenderer({ columnIndex, data, rowIndex, style }) {\n\n  return (\n    <Fragment>\n      {rowIndex === 0 ?\n\n        // Header\n        <HeaderCellRenderer columnIndex={columnIndex} data={data} style={style} />\n        :\n\n        // Body rows\n        <Box display=\"flex\" alignItems=\"center\" style={{ ...style, ...data.style, height: data.rowHeight - data.rowSpacing }}>\n          <Box pl={2}>\n            {data.data[rowIndex - 1][data.columns[columnIndex].id]}\n          </Box>\n          <Box height={data.rowSpacing} />\n        </Box>\n      }\n    </Fragment>\n  )\n\n}\n\n\nexport default function DataGrid({ columns = [], rows = [],\n  order, orderBy,\n  headerHeight = 60, rowHeight = 100, rowSpacing = 20,\n  gridStyle = null, headerCellStyle = null, cellStyle = null }) {\n\n  const theme = useTheme()\n  const classes = useStyles()\n\n  const [sort, setSort] = useState(order)\n  const [sortBy, setSortBy] = useState(orderBy)\n\n  const handleRequestSort = (_, property) => {\n    const isAsc = sortBy === property && sort === 'asc'\n    setSort(isAsc ? 'desc' : 'asc')\n    setSortBy(property)\n  }\n\n  const getColumnsWidth = () => {\n\n    let strLen = 0\n    let colWidths = columns.map(aColumn => {\n      return {\n        id: aColumn.id,\n        width: rows.reduce((prev, current) => {\n\n          if (aColumn.width && aColumn.width !== 0) {\n            return aColumn.width\n          }\n\n          strLen = current[aColumn.id] ? 10 * current[aColumn.id].toString().length : 50\n          return strLen > prev ? strLen : prev\n        }, 0)\n      }\n    })\n\n    return colWidths = { data: colWidths, total: colWidths.reduce((prev, current) => prev + current.width, 0) }\n  }\n\n  const columnsWidth = getColumnsWidth()\n\n\n\n  return (\n    <AutoSizer>\n      {({ height, width }) => (\n        <DGrid\n          // className=\"Grid\"\n          columnCount={columns.length}\n          columnWidth={index => {\n\n            return (columnsWidth.total < width) ?\n              columnsWidth.data[index].width + ((width - columnsWidth.total) / columns.length) - (scrollbarWidth / columns.length)\n              : columnsWidth.data[index].width\n          }}\n          height={height}\n          rowCount={rows.length + 1}\n          rowHeight={index => (index === 0 ? headerHeight : rowHeight)}\n          width={width}\n          style={!gridStyle ? {\n\n          } : gridStyle}\n          // className=\"d-grid\"\n          className={classes.DGridScrollbar}\n\n          itemData={{\n            data: stableSort(rows, getComparator(sort, sortBy)), columns: columns, rowHeight: rowHeight, rowSpacing: rowSpacing,\n            headerHeight: headerHeight,\n            sort: sort, sortBy: sortBy, handleRequestSort: handleRequestSort,\n            style: !cellStyle ? {\n              backgroundColor: theme.palette.background.paper,\n              borderBottom: `1px solid ${theme.palette.primary.main}66`\n            } : cellStyle,\n            headerStyle: !headerCellStyle ? {\n              color: `${theme.palette.primary.dark}66`\n            } : headerCellStyle\n          }}\n          itemKey={({ columnIndex, data, rowIndex }) => `${data.columns[columnIndex].id} | ${rowIndex === 0 ? '1' : (data.data[rowIndex - 1]._id)}`}\n        >\n          {CellRenderer}\n        </DGrid>\n      )\n      }\n    </AutoSizer >\n  )\n}\n","import React, { useEffect, useState } from 'react'\n\nimport DataGrid from 'mui-data-datagrid'\n\nfunction App() {\n\n  const [rows, setRows] = useState([])\n\n  const columns = [\n    { id: '_Name', isNumeric: false, label: \"Name\", main: true },\n    { id: '_Visibility', isNumeric: false, label: \"Visibility\" },\n    { id: 'actions', isNumeric: false, label: \"Actions\" },\n  ]\n\n  const handleOnClick = () => {\n    alert('Hi !')\n  }\n\n  useEffect(() => {\n\n    let data = []\n    for (let index = 0; index < 1000; index++) {\n      data = [...data, { _Name: 'test.png', _Visibility: 'Public', actions: <button onClick={handleOnClick}>Hi !</button> }]\n    }\n    setRows(data)\n  }, [])\n\n  return (\n    <div style={{ width: '100vw', height: '100vh', backgroundColor: '#F8F9FF' }}>\n      <DataGrid\n        columns={columns} rows={rows}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}